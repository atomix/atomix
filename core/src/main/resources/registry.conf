# Copyright 2018-present Open Networking Foundation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# primitiveTypes is an object describing primitive types. The key is the primitive type name by which the
# type can be loaded. The value is an object describing the various classes that operate the primitive.
primitiveTypes.counter {
  builderClass: io.atomix.core.counter.impl.AtomicCounterProxyBuilder
  configClass: io.atomix.core.counter.AtomicCounterConfig
  primitiveClass: io.atomix.core.counter.AtomicCounter
  serviceClass: io.atomix.core.counter.impl.AtomicCounterService
  resourceClass: io.atomix.core.counter.impl.AtomicCounterResource
}
primitiveTypes.election {
  builderClass: io.atomix.core.election.impl.LeaderElectionProxyBuilder
  configClass: io.atomix.core.election.LeaderElectionConfig
  primitiveClass: io.atomix.core.election.LeaderElection
  serviceClass: io.atomix.core.election.impl.LeaderElectionService
  resourceClass: io.atomix.core.election.impl.LeaderElectionResource
}
primitiveTypes.elector {
  builderClass: io.atomix.core.election.impl.LeaderElectorProxyBuilder
  configClass: io.atomix.core.election.LeaderElectorConfig
  primitiveClass: io.atomix.core.election.LeaderElector
  serviceClass: io.atomix.core.election.impl.LeaderElectorService
}
primitiveTypes.idGenerator {
  builderClass: io.atomix.core.generator.impl.DelegatingAtomicIdGeneratorBuilder
  configClass: io.atomix.core.generator.AtomicIdGeneratorConfig
  primitiveClass: io.atomix.core.generator.AtomicIdGenerator
  serviceClass: io.atomix.core.counter.impl.AtomicCounterService
}
primitiveTypes.lock {
  builderClass: io.atomix.core.lock.impl.DistributedLockProxyBuilder
  configClass: io.atomix.core.lock.DistributedLockConfig
  primitiveClass: io.atomix.core.lock.DistributedLock
  serviceClass: io.atomix.core.lock.impl.DefaultDistributedLockService
  resourceClass: io.atomix.core.lock.impl.DistributedLockResource
}
primitiveTypes.map {
  builderClass: io.atomix.core.map.impl.ConsistentMapProxyBuilder
  configClass: io.atomix.core.map.ConsistentMapConfig
  primitiveClass: io.atomix.core.map.ConsistentMap
  serviceClass: io.atomix.core.map.impl.ConsistentMapService
  resourceClass: io.atomix.core.map.impl.ConsistentMapResource
}
primitiveTypes.counterMap {
  builderClass: io.atomix.core.map.impl.AtomicCounterMapProxyBuilder
  configClass: io.atomix.core.map.AtomicCounterMapConfig
  primitiveClass: io.atomix.core.map.AtomicCounterMap
  serviceClass: io.atomix.core.map.impl.AtomicCounterMapService
}
primitiveTypes.treeMap {
  builderClass: io.atomix.core.map.impl.ConsistentTreeMapProxyBuilder
  configClass: io.atomix.core.map.ConsistentTreeMapConfig
  primitiveClass: io.atomix.core.map.ConsistentTreeMap
  serviceClass: io.atomix.core.map.impl.ConsistentTreeMapService
}
primitiveTypes.multimap {
  builderClass: io.atomix.core.multimap.impl.ConsistentMultimapProxyBuilder
  configClass: io.atomix.core.multimap.ConsistentMultimapConfig
  primitiveClass: io.atomix.core.multimap.ConsistentMultimap
  serviceClass: io.atomix.core.multimap.impl.ConsistentSetMultimapService
}
primitiveTypes.workQueue {
  builderClass: io.atomix.core.queue.impl.WorkQueueProxyBuilder
  configClass: io.atomix.core.queue.WorkQueueConfig
  primitiveClass: io.atomix.core.queue.WorkQueue
  serviceClass: io.atomix.core.queue.impl.WorkQueueService
  resourceClass: io.atomix.core.queue.impl.WorkQueueResource
}
primitiveTypes.documentTree {
  builderClass: io.atomix.core.tree.impl.DocumentTreeProxyBuilder
  configClass: io.atomix.core.tree.DocumentTreeConfig
  primitiveClass: io.atomix.core.tree.DocumentTree
  serviceClass: io.atomix.core.tree.impl.DocumentTreeService
  resourceClass: io.atomix.core.tree.impl.DocumentTreeResource
}
primitiveTypes.semaphore {
  builderClass: io.atomix.core.semaphore.impl.DistributedSemaphoreProxyBuilder
  configClass: io.atomix.core.semaphore.DistributedSemaphoreConfig
  primitiveClass: io.atomix.core.semaphore.DistributedSemaphore
  serviceClass: io.atomix.core.semaphore.impl.DistributedSemaphoreService
  serviceConfigClass: io.atomix.core.semaphore.DistributedSemaphoreServiceConfig
}
primitiveTypes.set {
  builderClass: io.atomix.core.set.impl.DelegatingDistributedSetBuilder
  configClass: io.atomix.core.set.DistributedSetConfig
  primitiveClass: io.atomix.core.set.DistributedSet
  serviceClass: io.atomix.core.map.impl.ConsistentMapService
}
primitiveTypes.value {
  builderClass: io.atomix.core.value.impl.AtomicValueProxyBuilder
  configClass: io.atomix.core.value.AtomicValueConfig
  primitiveClass: io.atomix.core.value.AtomicValue
  serviceClass: io.atomix.core.value.impl.AtomicValueService
  resourceClass: io.atomix.core.value.impl.AtomicValueResource
}

# partitionGroupTypes describes available partition groups. These group types can be referenced in the Atomix
# configuration to construct new partition groups. The key is the group type name and the value is an object
# describing how an instance of the group type is configured and constructed.
partitionGroupTypes {
}

# protocolTypes desribes the available protocol implementations. The key is the protocol type name and the value
# is an object describing how an instance of the protocol type is configured and constructed.
protocolTypes {
}

# profileTypes describes the available profile implementations. The key is the profile type name and the value is
# an object describing the profile implementation.
profileTypes.data-grid {
  profileClass: io.atomix.core.profile.DataGridProfile
}
profileTypes.consensus {
  profileClass: io.atomix.core.profile.ConsensusProfile
}
profileTypes.client {
  profileClass: io.atomix.core.profile.ClientProfile
}