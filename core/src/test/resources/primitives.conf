cluster {
  cluster-id: test
  discovery {
    type: bootstrap
    nodes.1 {
      id: 1
      address: "localhost:5001"
    }
    nodes.2 {
      id: 2
      address: "localhost:5002"
    }
    nodes.3 {
      id: 3
      address: "localhost:5003"
    }
  }
}

management-group {
  type: raft
  partitions: 1
  segmentSize: 16M
  members: [1, 2, 3]
}

partition-groups.one {
  type: raft
  partitions: 3
  members: [1, 2, 3]
}

partition-groups.two {
  type: primary-backup
  partitions: 7
}

primitives.atomic-counter {
  type: atomic-counter
  protocol {
    type: multi-primary
    group: two
  }
}

primitives.atomic-map {
  type: atomic-map
  protocol {
    type: multi-primary
    group: two
  }
}

primitives.atomic-counter-map {
  type: atomic-counter-map
  protocol {
    type: multi-primary
    group: two
  }
}

primitives.atomic-document-tree {
  type: atomic-document-tree
  protocol {
    type: multi-primary
    group: two
  }
}

primitives.atomic-id-generator {
  type: atomic-id-generator
  protocol {
    type: multi-primary
    group: two
  }
}

primitives.atomic-lock {
  type: atomic-lock
  protocol {
    type: multi-primary
    group: two
  }
}

primitives.atomic-multimap {
  type: atomic-multimap
  protocol {
    type: multi-primary
    group: two
  }
}

primitives.atomic-navigable-map {
  type: atomic-navigable-map
  protocol {
    type: multi-primary
    group: two
  }
}

primitives.atomic-semaphore {
  type: atomic-semaphore
  protocol {
    type: multi-primary
    group: two
  }
}

primitives.atomic-sorted-map {
  type: atomic-sorted-map
  protocol {
    type: multi-primary
    group: two
  }
}

primitives.atomic-value {
  type: atomic-value
  protocol {
    type: multi-primary
    group: two
  }
}

primitives.counter {
  type: counter
  protocol {
    type: multi-primary
    group: two
  }
}

primitives.cyclic-barrier {
  type: cyclic-barrier
  protocol {
    type: multi-primary
    group: two
  }
}

primitives.leader-election {
  type: leader-election
  protocol {
    type: multi-primary
    group: two
  }
}

primitives.leader-elector {
  type: leader-elector
  protocol {
    type: multi-primary
    group: two
  }
}

primitives.list {
  type: list
  protocol {
    type: multi-primary
    group: two
  }
}

primitives.lock {
  type: lock
  protocol {
    type: multi-primary
    group: two
  }
}

primitives.map {
  type: map
  protocol {
    type: multi-primary
    group: two
  }
}

primitives.multimap {
  type: multimap
  protocol {
    type: multi-primary
    group: two
  }
}

primitives.multiset {
  type: multiset
  protocol {
    type: multi-primary
    group: two
  }
}

primitives.navigable-map {
  type: navigable-map
  protocol {
    type: multi-primary
    group: two
  }
}

primitives.navigable-set {
  type: navigable-set
  protocol {
    type: multi-primary
    group: two
  }
}

primitives.queue {
  type: queue
  protocol {
    type: multi-primary
    group: two
  }
}

primitives.semaphore {
  type: semaphore
  protocol {
    type: multi-primary
    group: two
  }
}

primitives.set {
  type: set
  protocol {
    type: multi-primary
    group: two
  }
}

primitives.sorted-map {
  type: sorted-map
  protocol {
    type: multi-primary
    group: two
  }
}

primitives.sorted-set {
  type: sorted-set
  protocol {
    type: multi-primary
    group: two
  }
}

primitives.value {
  type: value
  protocol {
    type: multi-primary
    group: two
  }
}

primitives.work-queue {
  type: work-queue
  protocol {
    type: multi-primary
    group: two
  }
}
