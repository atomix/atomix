cluster {
  cluster-id: test
  node {
    id: one
    address: "localhost:5000"
    zone: "foo"
    rack: "bar"
    host: "baz"
    properties {
      foo: "bar"
      bar: "baz"
    }
  }
  multicast {
    enabled: true
    group: "230.0.1.1"
    port: 56789
  }
  protocol {
    type: phi
    heartbeatInterval: 200ms
    failureThreshold: 12
    failureTimeout: 15s
  }
  membership {
    broadcast-interval: 1s
    reachability-threshold: 12
    reachability-timeout: 15s
  }
  discovery {
    type: multicast
    broadcast-interval: 1s
    failure-threshold: 12
    failure-timeout: 15s
  }
  messaging {
    connect-timeout: 10s
    interfaces: ["127.0.0.1", "0.0.0.0"]
    port: 5000
    tls {
      enabled: true
      key-store: keystore.jks
      key-store-password: foo
      trust-store: truststore.jks
      trust-store-password: bar
    }
  }
}

management-group {
  type: raft
  partitions: 1
  storage.segmentSize: 16M
}

partition-groups.one {
  type: raft
  partitions: 7
}

partition-groups.two {
  type: primary-backup
  partitions: 32
}

profiles.1 {
  type: consensus
  management-group: management
  data-group: consensus
  partitions: 3
  members: [one, two, three]
}

profiles.2 {
  type: data-grid
  management-group: management
  data-group: data
  partitions: 32
}

primitive-defaults.atomic-map {
  protocol {
    type: multi-primary
    group: two
  }
}

primitives.foo {
  type: atomic-map
  null-values: true
}

primitives.bar {
  type: set
  cache.enabled: true
  protocol {
    type: multi-primary
    replication: synchronous
    retry-delay: 1s
  }
}

primitives.baz {
  type: atomic-value
  protocol {
    type: multi-raft
    read-consistency: sequential
    recovery-strategy: recover
    retry-delay: 2s
  }
}
