cluster {
  clusterId: test
  node {
    id: one
    host: localhost
    port: 5000
    zoneId: "foo"
    rackId: "bar"
    hostId: "baz"
    properties {
      foo: "bar"
      bar: "baz"
    }
  }
  multicast {
    enabled: true
    group: "230.0.1.1"
    port: 56789
  }
  protocol {
    type: heartbeat
    heartbeatInterval: 200ms
    phiFailureThreshold: 12
    failureTimeout: 15s
  }
  membership {
    broadcastInterval: 1s
    reachabilityThreshold: 12
    reachabilityTimeout: 15s
  }
  discovery {
    type: multicast
    broadcastInterval: 1s
    failureThreshold: 12
    failureTimeout: 15s
  }
  messaging {
    connectTimeout: 10s
    interfaces: ["127.0.0.1", "0.0.0.0"]
    port: 5000
    tls {
      enabled: true
      keyStore: keystore.jks
      keyStorePassword: foo
      trustStore: truststore.jks
      trustStorePassword: bar
    }
  }
}

managementGroup {
  type: raft
  partitions: 1
  electionTimeout: 5s
  heartbeatInterval: 500ms
  defaultSessionTimeout: 10s
  storage.segmentSize: 16M
  storage.level: memory
}

partitionGroups.one {
  type: raft
  partitions: 7
}

partitionGroups.two {
  type: primary-backup
  partitions: 32
}

partitionGroups.three {
  type: log
  partitions: 3
}

profiles.1 {
  type: consensus
  managementGroup: management
  dataGroup: consensus
  partitions: 3
  members: [one, two, three]
}

profiles.2 {
  type: data-grid
  managementGroup: management
  dataGroup: data
  partitions: 32
}

primitiveDefaults.atomic-map {
  protocol {
    type: multi-primary
    group: two
  }
}

primitives.foo {
  type: atomic-map
  nullValues: true
}

primitives.bar {
  type: set
  cache.enabled: true
  protocol {
    type: multi-primary
    replication: synchronous
    retryDelay: 1s
  }
}

primitives.baz {
  type: atomic-value
  protocol {
    type: multi-raft
    readConsistency: sequential
    recoveryStrategy: recover
    retryDelay: 2s
  }
}

primitives.log {
  type: log
  protocol {
    type: multi-log
    group: three
  }
}
