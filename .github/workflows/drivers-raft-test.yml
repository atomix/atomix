# Code generated by build-workflows script. DO NOT EDIT.
# source: drivers/raft/.github/workflows/test.yml

# SPDX-FileCopyrightText: 2023-present Intel Corporation
#
# SPDX-License-Identifier: Apache-2.0

name: Test raft driver

on:
  push:
    branches:
      - 'master'
      - 'actions'
    paths:
      - 'controller/**'
      - 'sidecar/**'
      - 'drivers/raft/**'
      - 'stores/raft/**'
      - 'test/**'
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-primitives:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx

      - name: Setup Helm
        uses: ./.github/actions/setup-helm

      - name: Create kind cluster
        uses: helm/kind-action@v1.4.0
        with:
          cluster_name: kind

      - name: Build atomix/cli
        uses: docker/build-push-action@v3
        with:
          context: cli
          builder: ${{ steps.buildx.outputs.name }}
          file: cli/build/Dockerfile
          tags: atomix/cli
          load: true
          push: false
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache

      - name: Build atomix/sidecar
        uses: docker/build-push-action@v3
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: drivers/raft/test/Dockerfile
          tags: atomix/sidecar
          load: true
          push: false
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache

      - name: Load atomix/sidecar
        run: kind load docker-image atomix/sidecar

      - name: Build atomix/sidecar-controller
        uses: docker/build-push-action@v3
        with:
          context: sidecar
          builder: ${{ steps.buildx.outputs.name }}
          file: sidecar/build/controller/Dockerfile
          tags: atomix/sidecar-controller
          load: true
          push: false
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache

      - name: Load atomix/sidecar-controller
        run: kind load docker-image atomix/sidecar-controller

      - name: Build atomix/controller
        uses: docker/build-push-action@v3
        with:
          context: controller
          builder: ${{ steps.buildx.outputs.name }}
          file: controller/build/controller/Dockerfile
          tags: atomix/controller
          load: true
          push: false
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache

      - name: Load atomix/controller
        run: kind load docker-image atomix/controller

      - name: Build atomix/controller-init
        uses: docker/build-push-action@v3
        with:
          context: controller
          builder: ${{ steps.buildx.outputs.name }}
          file: controller/build/controller-init/Dockerfile
          tags: atomix/controller-init
          load: true
          push: false
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache

      - name: Load atomix/controller-init
        run: kind load docker-image atomix/controller-init

      - name: Build atomix/raft-controller
        uses: docker/build-push-action@v3
        with:
          context: stores/raft
          builder: ${{ steps.buildx.outputs.name }}
          file: stores/raft/build/controller/Dockerfile
          tags: atomix/raft-controller
          load: true
          push: false
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache

      - name: Load atomix/raft-controller
        run: kind load docker-image atomix/raft-controller

      - name: Build atomix/raft-node
        uses: docker/build-push-action@v3
        with:
          context: stores/raft
          builder: ${{ steps.buildx.outputs.name }}
          file: stores/raft/build/node/Dockerfile
          tags: atomix/raft-node
          load: true
          push: false
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache

      - name: Load atomix/raft-node
        run: kind load docker-image atomix/raft-node

      - name: Build atomix/test
        uses: docker/build-push-action@v3
        with:
          context: test
          builder: ${{ steps.buildx.outputs.name }}
          file: test/build/Dockerfile
          tags: atomix/test
          load: true
          push: false
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache

      - name: Load atomix/test
        run: kind load docker-image atomix/test

      - name: Install core controller
        run: helm install -n kube-system atomix-controller ./controller/chart --set image.pullPolicy=Never --set init.image.pullPolicy=Never --wait

      - name: Install sidecar controller
        run: helm install -n kube-system atomix-sidecar-controller ./sidecar/chart --set image.pullPolicy=Never --wait

      - name: Install store controller
        run: helm install -n kube-system atomix-raft-controller ./stores/raft/chart --set image.pullPolicy=Never --wait

      - name: Setup tests
        run: kubectl create -f drivers/raft/test/setup.yaml

      - name: Install tests
        run: helm install test ./test/chart -f drivers/raft/test/suite.yaml --set image.pullPolicy=Never --wait

      - name: Test Counter/v1
        run: helm test test --filter name=test-counter-v1

      - name: Test Map/v1
        run: helm test test --filter name=test-map-v1

      - name: Record k8s status
        if: failure()
        run: |
          echo "kubectl get pods"
          kubectl get pods
          echo "kubectl get pods -n kube-system"
          kubectl get pods -n kube-system
          echo "kubectl get storageprofiles"
          kubectl get storageprofiles
          echo "kubectl get datastores"
          kubectl get datastores
          echo "kubectl get raftclusters"
          kubectl get raftclusters
          echo "kubectl get raftstores"
          kubectl get raftstores
          echo "kubectl get raftpartitions"
          kubectl get raftpartitions
          echo "kubectl get raftreplicas"
          kubectl get raftreplicas
