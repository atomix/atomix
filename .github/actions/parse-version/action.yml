# SPDX-FileCopyrightText: 2023-present Intel Corporation
#
# SPDX-License-Identifier: Apache-2.0

name: Parse and Validate Version

inputs:
  prefix:
    description: "The release prefix"
    required: false

outputs:
  full-version:
    description: "The full version"
    value: ${{ steps.parse-version.outputs.full-version }}
  semantic-version:
    description: "The semantic version"
    value: ${{ steps.parse-version.outputs.semantic-version }}
  patch-version:
    description: "The patch version"
    value: ${{ steps.parse-version.outputs.patch-version }}
  minor-version:
    description: "The minor version"
    value: ${{ steps.parse-version.outputs.minor-version }}
  major-version:
    description: 'The patch version'
    value: ${{ steps.parse-version.outputs.major-version }}

runs:
  using: composite
  steps:
    - name: Validate version
      shell: bash
      run: |
        tag="${{ github.ref_name }}"
        prefix="${{ inputs.prefix }}"
        pattern="${prefix}v*"
        if [[ "$tag" != $pattern ]]; then
          echo "GitHub ref_name is not a valid tag for the prefix ${ prefix }"
          exit 1
        fi
    - id: parse-version
      name: Parse version
      shell: bash
      run: |
        tag="${{ github.ref_name }}"
        prefix="${{ inputs.prefix }}"
        full_version=${tag/#$prefix}
        semantic_version=${full_version/#v}
        patch_version=$(cut -d '-' -f 1 <<< "$semantic_version")
        minor_version=$(cut -d '.' -f 1,2 <<< "$patch_version")
        major_version=$(cut -d '.' -f 1 <<< "$minor_version")
        [[ "$semantic_version" != "$patch_version" ]] && echo "prerelease-version=$semantic_version" || echo "prerelease-version=\"\"" >> $GITHUB_OUTPUT
        echo "full-version=$full_version" >> $GITHUB_OUTPUT
        echo "semantic-version=$semantic_version" >> $GITHUB_OUTPUT
        echo "patch-version=$patch_version" >> $GITHUB_OUTPUT
        echo "minor-version=$minor_version" >> $GITHUB_OUTPUT
        echo "major-version=$major_version" >> $GITHUB_OUTPUT
