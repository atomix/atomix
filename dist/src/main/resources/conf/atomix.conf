# The cluster configuration
cluster {
  cluster-id: atomix
  node.id: atomix-1
  node.address: "localhost:5679"
}

# The cluster's multicast configuration defines whether and how Atomix uses multicast for service discovery.
cluster.multicast {
  # Set to "true" to enable multicast
  enabled: true
  # Edit to change the multicast group.
  group: 230.0.0.1
  # Edit to change the multicast port.
  port: 54321
}

# The cluster discovery configuration defines how nodes discover one another.

# This is a multicast based discovery configuration. When multicast discovery is used, the node will broadcast
# its information via the provided multicast group to discover other nodes.
cluster.discovery {
  type: multicast
  broadcast-interval: 1s
  failure-timeout: 10s
  failure-threshold: 10
}

# This is a bootstrap based discovery configuration. When bootstrap discovery is used, the node connects to
# each node in the provided set for service discovery.
#cluster.discovery {
#  type: bootstrap
#  nodes.1 {
#    id: atomix-1
#    address: "10.192.19.171:5679"
# }
#  nodes.2 {
#    id: atomix-2
#    address: "10.192.19.172:5679"
#  }
#  nodes.3 {
#    id: atomix-3
#    address: "10.192.19.173:5679"
# }
#}

# A management group using the Raft consensus protocol.
management-group {
  type: raft
  partitions: 1
  members: [atomix-1]
}

# A primary-backup based management group.
#management-group {
#  type: primary-backup
#  partitions: 1
#}

# A consensus partition group.
partition-groups.consensus {
  type: raft
  partitions: 7
  members: [atomix-1]
}

# A primary-backup (data grid) partition group.
partition-groups.data {
  type: primary-backup
  partitions: 32
}

# An example primitive configuration using a Raft partition group.
primitives.foo {
  # The primitive type
  type: map
  # The protocol to use to replicate the primitive
  protocol {
    # The protocol type can be "multi-raft" or "multi-primary"
    type: multi-raft
    # The "group" indicates the name of the partition group in which to replicate the primitive.
    # The configured partition group must support the protocol indicated in "type" above.
    group: consensus
    # The read consistency indicates the consistency guarantee of reads on a Raft partition.
    # "sequential" reads guarantee state will not go back in time but do not provide a real-time guarantee
    # "linearizable-lease" reads guarantee linearizability assuming clock accuracy
    # "linearizable" guarantees linearizable reads by verifying the Raft leader
    read-consistency: sequential
    # The communication strategy indicates the node(s) to which the primitive should communicate in each partition.
    # "leader" indicates the primitive should communicate directly with the Raft leader
    # "followers" indicates the primitive should favor Raft followers
    # "any" indicates the primitive can communicate with any node in each partition
    communication-strategy: any
  }
}

# An example primitive configuration using a primary-backup partition group.
primitives.bar {
  # The primitive type
  type: set
  # The protocol to use to replicate the primitive
  protocol {
    # The protocol type can be "multi-raft" or "multi-primary"
    type: multi-primary
    # The "group" indicates the name of the partition group in which to replicate the primitive.
    # The configured partition group must support the protocol indicated in "type" above.
    group: data
    # The "consistency" is a primary-backup specific setting indicating whether the primitive should communicate
    # with the primary or backups on reads.
    consistency: sequential
    # The "replication" is a primary-backup specific setting indicating whether replication should be
    # "synchronous" or "asynchronous"
    replication: asynchronous
    # The "backups" indicates the number of copies to replicate in addition to the primary copy.
    # In other words, "2" backups means the primitive will be replicated on 3 nodes in each partition.
    backups: 2
    # "max-retries" is the maximum number of attempts to allow for any read or write.
    max-retries: 2
    # The "retry-delay" is the time to wait between retries.
    retry-delay: 100ms
  }
}
