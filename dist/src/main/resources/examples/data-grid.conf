# Copyright 2018-present Open Networking Foundation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# The cluster configuration defines how the nodes in the cluster join and communicate with one another.
cluster {
  # In order to support multicast-based node discovery, multicast must be enabled in the network
  # and in Atomix.
  multicast {
    enabled: true
    address: "230.0.0.1:54321"
  }

  # The node discovery protocol handles bootstrapping the Atomix cluster. When multicast is
  # enabled, the 'multicast' discovery protocol can be used to discover cluster membership
  # over multicast. The node will broadcast its existence according to the 'broadcastInterval'.
  discovery {
    type: multicast
    broadcastInterval: 1s
  }
}

# The 'managementGroup' is a required partition group used by the system to store primitive, transaction,
# and configuration information. This typically only needs to be a single partition.
managementGroup {
  type: primary-backup
  partitions: 1
}

# Using a Raft partition group for the 'managementGroup' can signficantly improve consistency for
# primary-backup partitions. When a Raft management group is present, Raft will be used for
# primary election and primitive/session managment.
# managementGroup {
#   type: raft
#   partitions: 1
#   members: [member-1, member-2, member-3]
# }

# The primary-backup partition group will be used to replicate distributed primitives. All Atomix
# nodes participating in the primary-backup protocol should include the following configuration.
# The number of partitions dictates the parallelism and should be greater than the number of
# members in the group.
partitionGroups.data {
  type: primary-backup
  partitions: 32
  memberGroupStrategy: rack-aware
}
