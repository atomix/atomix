# SPDX-FileCopyrightText: 2023-present Intel Corporation
#
# SPDX-License-Identifier: Apache-2.0

name: Test Raft Driver

on:
  push:
    branches:
      - 'master'
      - 'helmit'
    paths:
      - 'drivers/raft/**'
      - 'stores/raft/**'
      - 'sidecar/**'
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-controller:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build image
        uses: docker/build-push-action@v3
        with:
          context: controller
          file: controller/build/controller/Dockerfile
          tags: atomix/controller
          outputs: type=docker,dest=/tmp/controller.tar
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Share image
        uses: actions/upload-artifact@v3
        with:
          name: controller
          path: /tmp/controller.tar

  build-controller-init:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build image
        uses: docker/build-push-action@v3
        with:
          context: controller
          file: controller/build/controller-init/Dockerfile
          tags: atomix/controller-init
          outputs: type=docker,dest=/tmp/controller-init.tar
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Share image
        uses: actions/upload-artifact@v3
        with:
          name: controller-init
          path: /tmp/controller-init.tar

  build-raft-node:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build image
        uses: docker/build-push-action@v3
        with:
          context: stores/raft
          file: stores/raft/build/node/Dockerfile
          tags: atomix/raft-node
          outputs: type=docker,dest=/tmp/raft-node.tar
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Share image
        uses: actions/upload-artifact@v3
        with:
          name: raft-node
          path: /tmp/raft-node.tar

  build-raft-controller:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build image
        uses: docker/build-push-action@v3
        with:
          context: stores/raft
          file: stores/raft/build/controller/Dockerfile
          tags: atomix/raft-controller
          outputs: type=docker,dest=/tmp/raft-controller.tar
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Share image
        uses: actions/upload-artifact@v3
        with:
          name: raft-controller
          path: /tmp/raft-controller.tar

  build-sidecar-controller:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build image
        uses: docker/build-push-action@v3
        with:
          context: sidecar
          file: sidecar/build/controller/Dockerfile
          tags: atomix/sidecar-controller
          outputs: type=docker,dest=/tmp/sidecar-controller.tar
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Share image
        uses: actions/upload-artifact@v3
        with:
          name: sidecar-controller
          path: /tmp/sidecar-controller.tar

  build-sidecar:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build image
        uses: docker/build-push-action@v3
        with:
          file: drivers/raft/tests/Dockerfile
          tags: atomix/sidecar:raft
          outputs: type=docker,dest=/tmp/sidecar.tar
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Share image
        uses: actions/upload-artifact@v3
        with:
          name: sidecar
          path: /tmp/sidecar.tar

  run-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    needs:
      - build-controller
      - build-controller-init
      - build-raft-node
      - build-raft-controller
      - build-sidecar-controller
      - build-sidecar

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Setup Helm
        uses: ./.github/actions/setup-helm

      - name: Setup Helmit
        uses: ./.github/actions/setup-helmit

      - name: Create kind cluster
        uses: helm/kind-action@v1.4.0
        with:
          cluster_name: kind

      - name: Fetch atomix/controller
        uses: actions/download-artifact@v3
        with:
          name: controller
          path: /tmp

      - name: Fetch atomix/controller-init
        uses: actions/download-artifact@v3
        with:
          name: controller-init
          path: /tmp

      - name: Fetch atomix/raft-node
        uses: actions/download-artifact@v3
        with:
          name: raft-node
          path: /tmp

      - name: Fetch atomix/raft-controller
        uses: actions/download-artifact@v3
        with:
          name: raft-controller
          path: /tmp

      - name: Fetch atomix/sidecar-controller
        uses: actions/download-artifact@v3
        with:
          name: sidecar-controller
          path: /tmp

      - name: Fetch atomix/sidecar
        uses: actions/download-artifact@v3
        with:
          name: sidecar
          path: /tmp

      - name: Load Docker images
        run: |
          kind load image-archive /tmp/controller.tar
          kind load image-archive /tmp/controller-init.tar
          kind load image-archive /tmp/raft-node.tar
          kind load image-archive /tmp/raft-controller.tar
          kind load image-archive /tmp/sidecar-controller.tar
          kind load image-archive /tmp/sidecar.tar

      - name: Install core controller
        run: |
          helm install -n kube-system atomix-controller ./controller/chart --set image.pullPolicy=Never --set init.image.pullPolicy=Never --wait

      - name: Install sidecar controller
        run: |
          helm install -n kube-system atomix-sidecar-controller ./sidecar/chart --set image.pullPolicy=Never --set init.image.pullPolicy=Never --wait

      - name: Install store controller
        run: |
          helm install -n kube-system atomix-raft-controller ./stores/raft/chart --set image.pullPolicy=Never --set init.image.pullPolicy=Never --wait

      - name: Run driver tests
        working-directory: drivers/raft/tests
        run: |
          helmit test ./... \
            --context ${{ github.workspace }} \
            --namespace test \
            --create-namespace \
            --label sidecar.atomix.io/inject=true \
            --label runtime.atomix.io/profile=raft \
            --annotation sidecar.atomix.io/image=atomix/sidecar:raft \
            --annotation sidecar.atomix.io/imagePullPolicy=Never \
            --verbose

      - name: Record k8s status
        if: failure()
        run: |
          echo "kubectl get pods --all-namespaces"
          kubectl get pods --all-namespaces
          echo "kubectl get storageprofiles --all-namespaces"
          kubectl get storageprofiles --all-namespaces
          echo "kubectl get datastores --all-namespaces"
          kubectl get datastores --all-namespaces
          echo "kubectl get raftclusters --all-namespaces"
          kubectl get raftclusters --all-namespaces
          echo "kubectl get raftstores --all-namespaces"
          kubectl get raftstores --all-namespaces
          echo "kubectl get raftpartitions --all-namespaces"
          kubectl get raftpartitions --all-namespaces
          echo "kubectl get raftreplicas --all-namespaces"
          kubectl get raftreplicas --all-namespaces
