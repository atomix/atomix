/*
SPDX-FileCopyrightText: 2022-present Open Networking Foundation <info@opennetworking.org>

SPDX-License-Identifier: Apache-2.0
*/

syntax = "proto3";

package atomix.runtime.map.v1;

option java_package = "io.atomix.api.map.v1";
option java_outer_classname = "MapV1";
option java_multiple_files = true;

import "google/protobuf/duration.proto";
import "runtime/v1/runtime.proto";
import "runtime/map/v1/maps.proto";
import "gogoproto/gogo.proto";

// Map is a service for a map primitive
service Map {
    // Size returns the size of the map
    rpc Size (SizeRequest) returns (SizeResponse);

    // Put puts an entry into the map
    rpc Put (PutRequest) returns (PutResponse);

    // Insert inserts an entry into the map
    rpc Insert (InsertRequest) returns (InsertResponse);

    // Update updates an entry in the map
    rpc Update (UpdateRequest) returns (UpdateResponse);

    // Get gets the entry for a key
    rpc Get (GetRequest) returns (GetResponse);

    // Remove removes an entry from the map
    rpc Remove (RemoveRequest) returns (RemoveResponse);

    // Clear removes all entries from the map
    rpc Clear (ClearRequest) returns (ClearResponse);

    // Lock locks a key in the map
    rpc Lock(LockRequest) returns (LockResponse);

    // Unlock unlocks a key in the map
    rpc Unlock(UnlockRequest) returns (UnlockResponse);

    // Events listens for change events
    rpc Events (EventsRequest) returns (stream EventsResponse);

    // Entries lists all entries in the map
    rpc Entries (EntriesRequest) returns (stream EntriesResponse);

    // Commit commits a transactional change to the map
    rpc Commit (CommitRequest) returns (CommitResponse);

    // Create creates the Map
    // Deprecated: use the Maps service instead
    rpc Create (CreateRequest) returns (CreateResponse) {
        option deprecated = true;
    }

    // Close closes the Map
    // Deprecated: use the Maps service instead
    rpc Close (CloseRequest) returns (CloseResponse) {
        option deprecated = true;
    }
}

message SizeRequest {
    atomix.runtime.v1.PrimitiveID id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
}

message SizeResponse {
    uint32 size = 1;
}

message PutRequest {
    atomix.runtime.v1.PrimitiveID id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
    string key = 2;
    bytes value = 3;
    google.protobuf.Duration ttl = 4 [
        (gogoproto.customname) = "TTL",
        (gogoproto.stdduration) = true
    ];
    uint64 prev_version = 5;
}

message PutResponse {
    uint64 version = 1;
    VersionedValue prev_value = 2;
}

message InsertRequest {
    atomix.runtime.v1.PrimitiveID id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
    string key = 2;
    bytes value = 3;
    google.protobuf.Duration ttl = 4 [
        (gogoproto.customname) = "TTL",
        (gogoproto.stdduration) = true
    ];
}

message InsertResponse {
    uint64 version = 1;
}

message UpdateRequest {
    atomix.runtime.v1.PrimitiveID id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
    string key = 2;
    bytes value = 3;
    google.protobuf.Duration ttl = 4 [
        (gogoproto.customname) = "TTL",
        (gogoproto.stdduration) = true
    ];
    uint64 prev_version = 5;
}

message UpdateResponse {
    uint64 version = 1;
    VersionedValue prev_value = 2 [
        (gogoproto.nullable) = false
    ];
}

message GetRequest {
    atomix.runtime.v1.PrimitiveID id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
    string key = 2;
}

message GetResponse {
    VersionedValue value = 1 [
        (gogoproto.nullable) = false
    ];
}

message RemoveRequest {
    atomix.runtime.v1.PrimitiveID id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
    string key = 2;
    uint64 prev_version = 3;
}

message RemoveResponse {
    VersionedValue value = 1 [
        (gogoproto.nullable) = false
    ];
}

message ClearRequest {
    atomix.runtime.v1.PrimitiveID id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
}

message ClearResponse {

}

message LockRequest {
    atomix.runtime.v1.PrimitiveID id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
    repeated string keys = 2;
    google.protobuf.Duration timeout = 3 [
        (gogoproto.stdduration) = true
    ];
}

message LockResponse {

}

message UnlockRequest {
    atomix.runtime.v1.PrimitiveID id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
    repeated string keys = 2;
}

message UnlockResponse {

}

message EntriesRequest {
    atomix.runtime.v1.PrimitiveID id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
    bool watch = 2;
}

message EntriesResponse {
    Entry entry = 1 [
        (gogoproto.nullable) = false
    ];
}

message CommitRequest {
    atomix.runtime.v1.PrimitiveID id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
    repeated Operation operations = 2 [
        (gogoproto.nullable) = false
    ];

    message Operation {
        oneof operation {
            Put put = 1;
            Insert insert = 2;
            Update update = 3;
            Remove remove = 4;
        }
    }

    message Put {
        string key = 1;
        bytes value = 2;
        google.protobuf.Duration ttl = 3 [
            (gogoproto.customname) = "TTL",
            (gogoproto.stdduration) = true
        ];
        uint64 prev_version = 4;
    }

    message Insert {
        string key = 1;
        bytes value = 2;
        google.protobuf.Duration ttl = 3 [
            (gogoproto.customname) = "TTL",
            (gogoproto.stdduration) = true
        ];
    }

    message Update {
        string key = 1;
        bytes value = 2;
        google.protobuf.Duration ttl = 3 [
            (gogoproto.customname) = "TTL",
            (gogoproto.stdduration) = true
        ];
        uint64 prev_version = 4;
    }

    message Remove {
        string key = 1;
        uint64 prev_version = 2;
    }
}

message CommitResponse {
    repeated Result results = 1 [
        (gogoproto.nullable) = false
    ];

    message Result {
        oneof result {
            Put put = 1;
            Insert insert = 2;
            Update update = 3;
            Remove remove = 4;
        }
    }

    message Put {
        uint64 version = 1;
        VersionedValue prev_value = 2;
    }

    message Insert {
        uint64 version = 1;
    }

    message Update {
        uint64 version = 1;
        VersionedValue prev_value = 2 [
            (gogoproto.nullable) = false
        ];
    }

    message Remove {
        VersionedValue value = 1 [
            (gogoproto.nullable) = false
        ];
    }
}

message EventsRequest {
    atomix.runtime.v1.PrimitiveID id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
    string key = 2;
}

message EventsResponse {
    Event event = 2 [
        (gogoproto.nullable) = false
    ];
}

message Event {
    string key = 1;

    oneof event {
        Inserted inserted = 2;
        Updated updated = 3;
        Removed removed = 4;
    }

    message Inserted {
        VersionedValue value = 1 [
            (gogoproto.nullable) = false
        ];
    }

    message Updated {
        VersionedValue value = 1 [
            (gogoproto.nullable) = false
        ];
        VersionedValue prev_value = 2 [
            (gogoproto.nullable) = false
        ];
    }

    message Removed {
        VersionedValue value = 1 [
            (gogoproto.nullable) = false
        ];
        bool expired = 2;
    }
}

message Entry {
    string key = 1;
    VersionedValue value = 2;
}

message VersionedValue {
    bytes value = 1;
    uint64 version = 2;
}
